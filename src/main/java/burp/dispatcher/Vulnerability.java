package burp.dispatcher;

import burp.IHttpService;
import burp.Severity;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * Dispatcher related vulrenable paths
 *
 * @author thomas.hartmann@netcentric.biz
 * @since 12/2018
 */
public enum Vulnerability {

    SYSTEM_CONSOLE("OSGi webconsole backend exposed", Severity.HIGH, "", "/system/console", "/system/console.html"),
    CRX_DE("Administrative repository developer tool exposed", Severity.HIGH, "", "/crx", "/crx/de", "/crx/de/index.jsp",
            "/bin/crxde/logs"),
    WEBDAV("Insecure WebDav webdav endpoint exposed", Severity.HIGH, "", "/dav/crx.default"),
    VERSION_STORE("Information disclosure through version storage", Severity.HIGH, "", "/jcr:system/jcr:versionStorage.json",
            "/_jcr_system/_jcr_versionStorage.json"),
    CRX_EXPLORER_ACCESS("Administrative repository backend exposed", Severity.HIGH, "", "/crx/explorer", "/crx/explorer/index.jsp"),
    BACKEND_ACCESS("Administrative AEM backend exposed", Severity.HIGH, "", "/libs/wcm/core/content/siteadmin.html",
            "/libs/collab/core/content/admin.html"),
    QUERY_BUILDER("AEM querybuilder exposed", Severity.HIGH, "", "/bin/querybuilder.json"),
    LOGIN_PAGE("Login page exposed", Severity.INFORMATION, "", "/libs/cq/core/content/login.json",
            "/system/sling/cqform/defaultlogin.html"),
    UNPROTECTED_PROFILE_ENUMERATION("Enumeration of authorization data", Severity.HIGH, "",
            "/home/users.infinity.json",
            "/home/users.-1.json",
            "/home/users.10.json",
            "/home/groups.-1.json",
            "/home/groups.10.json",
            "/home/groups.infinity.json",
            "/home/users/a/admin/profile.json",
            "/home/users/a/admin/profile.xml"),
    INFORMATION_DISCLOSURE("AEM information disclosure", Severity.HIGH, "",
            "/var/linkchecker.html",
            "/etc/linkchecker.html",
            "/libs/cq/ui/content/dumplibs.html", "/libs/foundation/components/primary/cq/workflow/components/participants/json.GET.servlet",
            "/apps/sling/config/org.apache.felix.webconsole.internal.servlet.OsgiManager.config/jcr%3acontent/jcr%3adata"),
    METADATA_LEAKAGE("AEM metadata leakage", Severity.MEDIUM,
            "/content.pages.json",
            "/content.languages.json",
            "/content.blueprint.json",
            "/content.-1.json",
            "/content.10.json",
            "/content.infinity.json",
            "/content.tidy.json",
            "/content.tidy.-1.blubber.json",
            "/content/dam.tidy.-100.json",
            "/content/content/geometrixx.sitemap.txt",
            "/content/geometrixx.sitemap.txt",
            "/etc.xml",
            "/content.feed.xml",
            "/content.rss.xml",
            "/content.feed.html"
    );

    private String name;

    private String[] paths;

    private Severity severity;

    private String description;

    Vulnerability(final String name, final Severity severity, final String description, final String... paths) {
        this.name = name;
        this.paths = paths;
        this.severity = severity;
        this.description = description;
    }

    public String getName() {
        return name;
    }

    public List<String> getPaths() {
        return Arrays.asList(paths);
    }

    public Severity getSeverity() {
        return severity;
    }

    public String getDescription() {
        return description;
    }

    /**
     * Uses the provides parameters to create a ready to use URL.
     *
     * @param scheme Scheme to prefix the url. Typically it is either https or http but it is not enforced.
     * @param host   hostname to use for the URL
     * @param port   Port to consider when building the url
     * @return A list of URLs
     * @throws MalformedURLException
     */
    public List<URL> toUrl(final String scheme, final String host, final int port) throws MalformedURLException {
        final List<URL> urls = new ArrayList<>();
        for (final String path : this.paths) {
            urls.add(new URL(scheme, host, port, path));
        }

        return urls;
    }

    public List<URL> toUrl(final IHttpService httpService) throws MalformedURLException {
        final List<URL> urls = new ArrayList<>();
        for (final String path : this.paths) {
            urls.add(new URL(httpService.getProtocol(), httpService.getHost(), httpService.getPort(), path));
        }

        return urls;
    }

    /**
     * Uses the provides parameters to create a ready to use URL.
     *
     * @param scheme Scheme is either https or http
     * @param host   hostname to use for the URL
     * @return A list of URLs
     * @throws MalformedURLException
     */
    public List<URL> toUrl(final String scheme, final String host) throws MalformedURLException {
        final List<URL> urls = new ArrayList<>();
        for (final String path : this.paths) {
            urls.add(new URL(scheme, host, path));
        }

        return urls;
    }
}
